(1) Run:
date

This is a normal test case to test a command that matches with an executable in the directories specified by our PATH environment variable. The command executes properly displaying the date and showing the child process has exited. After it exits, we once again see the Shell prompt with our current directory.

(2) Fake Command: Input
fake_command
We see that the "Command 'command name' not found" prompt is returned. This is expected functionality, and wee see a program exit status message at the end. This command had no '/' so the Shell searched for a matching executable file in the directories specified by the PATH environment variable. No matching command was found so a Command 'command name' not found error was thrown.
(3) Set/$var command sequence:
Run set home apple
$home

Here we see now output is shown. This is expected as set should only change the values of environment variables that actuactually exist. After we try to display home as if it is an environment variable and see no output. This again makes sense as nothing should be displayed for output variables that do not exist.
(4) Run:
set $HOME apple
$HOME
env

Here the output after $HOME is apple which is what we want. Here variable HOME has changed the value it displays to the shell. After running env, we see that the HOME enviornment variable maintained its original value. This is expected as an environment variable should only change its value after an export command.
(5) Run:
exit
This test is used to make sure the command shell exits when a user types in exit.


(6) Run: 
set $PATH apple
export PATH
env

Here the output gives us the Command not found error and lets us continue inputting command subsequently. This makes sense as updated our PATH variable to a new value. Since we looked for executables to run through the directories specified by our PATH variable value, we now have a different PATH variable. As a result, we did not find the command that we may have found previously.

(7)Change_Dir: cd 
We see that the current directory changes to the value of the HOME environment variable. This is what we expect as cd with no arguments should change to the directory specified by your HOME environment variable.
(8) Change_Dir Command Sequence:
set PATH apple
export PATH
env
set PATH /bin
export PATH
date

This command sequence has the same 1st 3 commands as (6). However, subsequent commands show that we can still set our path variable once again, export it and we see that we can execute the date command once again as it is within the /bin directory specified by the PATH environment variable after export.
(9) Run:
set home myspace
export home
env

Here we can see that the Shell doesn't accidentally write a new environment variable that wasn't already present. The output shows that we don't see a key and value pair for the variable "home"
(10) Run:
cd /fakedirect
The output is an error that says no such file or directory. This is what is expected as theshell attempted to change to the directory inputed but could not as it did not exist.
(11) Run:
a\ b\ c\
Here the output is "Command a b c not found". As stated in the README, that error should print the argument name of the command that couldn't run in the format "Command 'command name' not found". Here we can see that this Shell sees any single spaces after our escape sequence, \, as an extension of the argument. This test shows that the 1 argument was gathered from the Terminal not 3 separate ones.
(12) Run:
df
du
free
Here we can see the disk usage from the 1st command, the space usage from the 2nd command, and the memory ands swap usage from the third command. These commands show that the Shell is successfully able to utilize the environment variables it has acess to.
(13) Run:
set HOME asdfk; salj asdflj afd laj
$HOME
Here we can see that we can set an environment variable that exists to any argument that we type in no matter the number of spaces or random characters. The output shows that the $HOME has changed its value to the gibberish typed as the 2nd argument to the set command.
